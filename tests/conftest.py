import pytest
import asyncio
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import NullPool
from app.main import app
from app.core.db import get_db, Base
from app.models.user import User  # –ü—Ä–∏–∫–ª–∞–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
from decouple import Config, RepositoryEnv
from unittest.mock import patch

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env.test
env_config = Config(RepositoryEnv(".env.test"))

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è TEST_DATABASE_URL
TEST_DATABASE_URL = env_config(
    "TEST_DATABASE_URL",
    default="postgresql+asyncpg://test_user:test_password@localhost:5433/test_blogdb"
)

if not TEST_DATABASE_URL:
    raise Exception("‚ùå TEST_DATABASE_URL is not set or is empty!")

print(f"üîç [TESTS] Using database: {TEST_DATABASE_URL}")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–≤–∏–≥—É–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
test_engine = create_async_engine(
    TEST_DATABASE_URL,
    poolclass=NullPool,
    echo=False,  # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å True –¥–ª—è –¥–µ–±–∞–≥—ñ–Ω–≥—É SQL-–∑–∞–ø–∏—Ç—ñ–≤
    future=True
)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–µ—Å—ñ—ó SQLAlchemy
TestingSessionLocal = sessionmaker(
    bind=test_engine,
    class_=AsyncSession,
    expire_on_commit=False
)


@pytest.fixture(scope="session")
def event_loop():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—î–≤–∏–π —Ü–∏–∫–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ—ó —Å–µ—Å—ñ—ó."""
    policy = asyncio.get_event_loop_policy()
    loop = policy.new_event_loop()
    yield loop
    loop.close()


@pytest.fixture(scope="session")
async def setup_test_db():
    """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—ñ—é)."""
    async with test_engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
        await conn.run_sync(Base.metadata.create_all)
    yield
    async with test_engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
    await test_engine.dispose()


@pytest.fixture
async def db_session(setup_test_db):
    """–ß–∏—Å—Ç–∞ —Å–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É."""
    async with TestingSessionLocal() as session:
        # –ü–æ—á–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        transaction = await session.begin()
        yield session
        # –í—ñ–¥–∫–æ—Ç–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è
        await transaction.rollback()


@pytest.fixture
async def client(db_session):
    """–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç —ñ–∑ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ—é –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""

    async def override_get_db():
        yield db_session

    app.dependency_overrides[get_db] = override_get_db

    async with AsyncClient(app=app, base_url="http://test") as ac:
        yield ac

    app.dependency_overrides.clear()


@pytest.fixture
async def test_user(db_session):
    """–§—ñ–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user = User(email="test@example.com", hashed_password="hashed_password")
    db_session.add(user)
    await db_session.commit()
    await db_session.refresh(user)
    return user


@pytest.fixture
async def authenticated_client(client, test_user):
    """–§—ñ–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞."""
    # –°–∏–º—É–ª—è—Ü—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    token = "mocked_jwt_token"
    client.headers.update({"Authorization": f"Bearer {token}"})
    return client


@pytest.fixture
def mock_google_ai():
    """–§—ñ–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫—É–≤–∞–Ω–Ω—è Google AI API."""
    with patch("services.ai_moderation.client.models.generate_content") as mock:
        yield mock